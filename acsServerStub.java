/*
 * Automatically generated by jrpcgen 1.0.7 on 12/19/23, 5:46 PM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

import org.acplt.oncrpc.server.*;

/**
 */
public abstract class acsServerStub extends OncRpcServerStub implements OncRpcDispatchable {

    public acsServerStub()
           throws OncRpcException, IOException {
        this(0);
    }

    public acsServerStub(int port)
           throws OncRpcException, IOException {
        this(null, port);
    }

    public acsServerStub(InetAddress bindAddr, int port)
           throws OncRpcException, IOException {
        info = new OncRpcServerTransportRegistrationInfo [] {
            new OncRpcServerTransportRegistrationInfo(acs.FTP, 1),
        };
        transports = new OncRpcServerTransport [] {
            new OncRpcUdpServerTransport(this, bindAddr, port, info, 32768),
            new OncRpcTcpServerTransport(this, bindAddr, port, info, 32768)
        };
    }

    public void dispatchOncRpcCall(OncRpcCallInformation call, int program, int version, int procedure)
           throws OncRpcException, IOException {
        if ( version == 1 ) {
            switch ( procedure ) {
            case 1: {
                XdrString args$ = new XdrString();
                call.retrieveCall(args$);
                response result$ = read_file_1(args$.stringValue());
                call.reply(result$);
                break;
            }
            case 2: {
                class XdrAble$ implements XdrAble {
                    public String file_name;
                    public String content_file;
                    public void xdrEncode(XdrEncodingStream xdr)
                        throws OncRpcException, IOException {
                    }
                    public void xdrDecode(XdrDecodingStream xdr)
                        throws OncRpcException, IOException {
                        file_name = xdr.xdrDecodeString();
                        content_file = xdr.xdrDecodeString();
                    }
                };
                XdrAble$ args$ = new XdrAble$();
                call.retrieveCall(args$);
                response result$ = write_1(args$.file_name, args$.content_file);
                call.reply(result$);
                break;
            }
            case 3: {
                XdrString args$ = new XdrString();
                call.retrieveCall(args$);
                response result$ = delete_1(args$.stringValue());
                call.reply(result$);
                break;
            }
            case 4: {
                XdrString args$ = new XdrString();
                call.retrieveCall(args$);
                response result$ = list_1(args$.stringValue());
                call.reply(result$);
                break;
            }
            default:
                call.failProcedureUnavailable();
            }
        } else {
            call.failProgramUnavailable();
        }
    }

    public abstract response read_file_1(String file_name);

    public abstract response write_1(String file_name, String content_file);

    public abstract response delete_1(String file_name);

    public abstract response list_1(String dire_name);

}
// End of acsServerStub.java
